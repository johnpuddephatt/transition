{"version":3,"sources":["webpack:///webpack/bootstrap b010795997cdfdb93c37","webpack:///./scripts/main.js","webpack:////Users/johnpuddephatt/Sites/transition/web/app/themes/transition/node_modules/intersection-observer/intersection-observer.js","webpack:///./scripts/util/Router.js","webpack:///./scripts/util/camelCase.js","webpack:///./scripts/routes/common.js","webpack:///./scripts/routes/home.js","webpack:////Users/johnpuddephatt/Sites/transition/web/app/themes/transition/node_modules/typesplit/splittype.js","webpack:///./scripts/routes/about.js","webpack:///./styles/main.scss?b1e7"],"names":["const","this","let"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,KAAK;QACL;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;;;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAO,CAAC,CAAuB,CAAC,CAAC;;;;;;AAME;AACE;AACJ;AACI;;;AAGrCA,GAAK,CAAC,MAAM,GAAG,IAAI,6DAAM,CAAC;;EAExB,uEAAM;;EAEN,mEAAI;;EAEJ,uEAAO;CACR,CAAC,CAAC;;;AAGH,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,WAAK,eAAM,CAAC,UAAU,EAAE,IAAC,CAAC;;;;;;;ACvBxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;;;AAGA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC;AACA,WAAW,0BAA0B;AACrC;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,4BAA4B;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,UAAU;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA,CAAC;;;;;;;;ACpuBD;AAAoC;;;;;;;;;;AAUpC,IAAM,MAAM,GAMV,eAAW,CAAC,MAAM,EAAE;EAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACvB,CAAC;;AAED;CACC;CACA;CACA;CACA;CACA;AACD,qBAAI,kBAAC,KAAK,EAAE,KAAc,EAAE,GAAG,EAAE,CAAhB;iCAAA,GAAG,MAAM;AAAQ;EAChC,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE;IAC/C,OAAO,EAAE,IAAI;IACb,MAAM,EAAE;MACN,YAAK;MACL,EAAE,EA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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,+FAA+F;AAC/F;AACA;AACA,kDAAkD;AAClD,qBAAqB;AACrB;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8EAA8E;;AAE9E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,aAAa;AACb;AACA,WAAW;;AAEX;AACA;;AAEA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,iDAAiD,kDAAkD;AACnG;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA,OAAO,GAAG;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;;AAEP;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B,aAAa;AAC7E,aAAa;AACb;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH,CAAC,E;;;;;;;ACltBc;EACb,IAAI,kBAAG;;GAEN;CACF,EAAC;;;;;;;ACJF,yC","file":"scripts/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/app/themes/transition/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b010795997cdfdb93c37","// import external dependencies\nrequire('intersection-observer');\n\n// Import everything from autoload\n\n\n// import local dependencies\nimport Router from './util/Router';\nimport common from './routes/common';\nimport home from './routes/home';\nimport aboutUs from './routes/about';\n\n/** Populate Router instance with DOM routes */\nconst routes = new Router({\n  // All pages\n  common,\n  // Home page\n  home,\n  // About Us page, note the change from about-us to aboutUs.\n  aboutUs,\n});\n\n// Load Events\ndocument.addEventListener('DOMContentLoaded', ()=> routes.loadEvents());\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/main.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * A local reference to the document.\n */\nvar document = window.document;\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/johnpuddephatt/Sites/transition/web/app/themes/transition/node_modules/intersection-observer/intersection-observer.js\n// module id = 2\n// module chunks = 0","import camelCase from './camelCase';\n\n/**\n * DOM-based Routing\n *\n * Based on {@link http://goo.gl/EUTi53|Markup-based Unobtrusive Comprehensive DOM-ready Execution} by Paul Irish\n *\n * The routing fires all common scripts, followed by the page specific scripts.\n * Add additional events for more control over timing e.g. a finalize event\n */\nclass Router {\n\n  /**\n   * Create a new Router\n   * @param {Object} routes\n   */\n  constructor(routes) {\n    this.routes = routes;\n  }\n\n  /**\n   * Fire Router events\n   * @param {string} route DOM-based route derived from body classes (`<body class=\"...\">`)\n   * @param {string} [event] Events on the route. By default, `init` and `finalize` events are called.\n   * @param {string} [arg] Any custom argument to be passed to the event.\n   */\n  fire(route, event = 'init', arg) {\n    document.dispatchEvent(new CustomEvent('routed', {\n      bubbles: true,\n      detail: {\n        route,\n        fn: event,\n      },\n    }));\n    \n    const fire = route !== '' && this.routes[route] && typeof this.routes[route][event] === 'function';\n    if (fire) {\n      this.routes[route][event](arg);\n    }\n  }\n\n  /**\n   * Automatically load and fire Router events\n   *\n   * Events are fired in the following order:\n   *  * common init\n   *  * page-specific init\n   *  * page-specific finalize\n   *  * common finalize\n   */\n  loadEvents() {\n    // Fire common init JS\n    this.fire('common');\n\n    // Fire page-specific init JS, and then finalize JS\n    document.body.className\n      .toLowerCase()\n      .replace(/-/g, '_')\n      .split(/\\s+/)\n      .map(camelCase)\n      .forEach((className) => {\n        this.fire(className);\n        this.fire(className, 'finalize');\n      });\n\n    // Fire common finalize JS\n    this.fire('common', 'finalize');\n  }\n}\n\nexport default Router;\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/util/Router.js","/**\n * the most terrible camelizer on the internet, guaranteed!\n * @param {string} str String that isn't camel-case, e.g., CAMeL_CaSEiS-harD\n * @return {string} String converted to camel-case, e.g., camelCaseIsHard\n */\nexport default str => `${str.charAt(0).toLowerCase()}${str.replace(/[\\W_]/g, '|').split('|')\n  .map(part => `${part.charAt(0).toUpperCase()}${part.slice(1)}`)\n  .join('')\n  .slice(1)}`;\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/util/camelCase.js","export default {\n  init() {\n    // JavaScript to be fired on all pages\n  },\n  finalize() {\n    // JavaScript to be fired on all pages, after page specific JS is fired\n  },\n};\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/routes/common.js","require('typesplit');\n\nconst SplitType = window.SplitType;\n\nexport default {\n  init() {\n    // JavaScript to be fired on the home page\n\n  },\n  finalize() {\n    // JavaScript to be fired on the home page, after the init JS\n    new SplitType('.loading--title', { split: 'chars', tagName: 'span' });\n\n    (function aboutIntersectionObserver() {\n      let callback = function (entries) {\n        entries.forEach(entry => {\n          if(entry.intersectionRatio > 0) {\n            entry.target.classList.add('in-view');\n          }\n        });\n      };\n      let options = {\n        // rootMargin: '0px 0px',\n        threshold: 0.1,\n      }\n      let observer = new IntersectionObserver(callback, options);\n      let target = document.querySelector('.home-about');\n      observer.observe(target);\n    })();\n\n    (function aboutIntersectionObserver() {\n      let callback = function (entries) {\n        entries.forEach(entry => {\n          if(entry.intersectionRatio > 0) {\n            entry.target.classList.add('in-view');\n          }\n        });\n      };\n      let options = {\n        // rootMargin: '0px 0px',\n        threshold: 0.1,\n      }\n      let observer = new IntersectionObserver(callback, options);\n      let target = document.querySelector('.home-blog');\n      observer.observe(target);\n    })();\n\n    (function projectsIntersectionObserver() {\n      let height = window.innerHeight;\n      let targets = document.querySelectorAll('.home-projects--list li');\n      if(targets.length) {\n        let targetHeight = targets[0].clientHeight;\n        let callback = function (entries) {\n          entries.forEach(entry => {\n            if(entry.intersectionRatio > 0.5) {\n              entry.target.classList.add('active');\n            }\n            else{\n              entry.target.classList.remove('active');\n            }\n          });\n        }\n\n        let options = {\n          rootMargin: `-${(height - targetHeight)/2}px 0px`,\n          threshold: 0.5,\n        }\n        let observer = new IntersectionObserver(callback, options);\n        targets.forEach(target => {\n          observer.observe(target);\n        });\n      }\n\n    })();\n\n\n\n    // let heroSplit = new SplitType('.loading--title', { split: 'words,chars', tagName: 'span' });\n    // window.addEventListener('resize', ()=>{\n    //   heroSplit.revert();\n    //   new SplitType('.loading--title', { split: 'words,chars', tagName: 'span' });\n    // });\n  },\n};\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/routes/home.js","/**\n * SplitType\n * A javascript utility that splits text into individual lines, words, and characters\n * so they can be animated and styled independently.\n * @updated: 6/6/2016\n * @author: Luke Peavey\n * @version: 1.0\n * @license MIT\n */\n\n\n// Support module loaders\n(function ( global, factory ) {\n  if ( typeof define === 'function' && define.amd ) {\n    define( factory );\n  } else if ( typeof exports !== 'undefined' ) {\n    module.exports = factory();\n  } else {\n    factory();\n  }\n})( this, function factory() {\n  window.SplitType = (function ( window, document, undefined ) {\n    // Fail silently on ancient browsers ( IE <= 8 )\n    if ( ! document.addEventListener || ! Function.prototype.bind ) return;\n\n    'use strict';\n    // global vars\n    var DEBUG                 = false;\n    var expando               = 'splitType' + (new Date() * 1);\n    var cache                 = {};\n    var uid                   = 0;\n    var push                  = Array.prototype.push;\n    var slice                 = Array.prototype.slice;\n    var keys                  = Object.keys;\n    var hasOwn                = Object.prototype.hasOwnProperty;\n    var defineProperty        = Object.defineProperty;\n    var defineProperties      = Object.defineProperties;\n    var getPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    var createFragment        = document.createDocumentFragment.bind( document );\n    var createTextNode        = document.createTextNode.bind( document );\n\n    /**\n     * The global default settings used for all SplitType calls. Default\n     * settings can be modified via the static 'defaults' property on the\n     * SplitType constructor.\n     * @private\n     */\n    var _defaults = {\n      splitClass : '',\n      lineClass  : 'line',\n      wordClass  : 'word',\n      charClass  : 'char',\n      split      : 'lines, words, chars',\n      position   : 'relative',\n      absolute   : false, // alternate syntax for setting position.\n      tagName    : 'div',\n      DEBUG      : false,\n    };\n\n\n    /***********************\n     - Utility Functions -\n     ***********************/\n    function isObject( obj ) {\n      return obj !== null && typeof obj === 'object';\n    }\n\n    function isArraylike( obj ) {\n      return isObject( obj ) && typeof obj.length === 'number' && obj.length > 0; // returns false for empty arrays,\n                                                                                  // which is fine for our purposes\n    }\n\n    function isPlainObject( obj ) {\n      return isObject( obj ) && Object.prototype.toString.call( obj ) === '[object Object]';\n    }\n\n    function isNode( obj ) {\n      return isObject( obj ) && /^(1|3|11)$/.test( obj.nodeType );\n    }\n\n    function isString( obj ) {\n      return typeof obj === 'string';\n    }\n\n    /**\n     * Iterates array, arraylike, and plain objects\n     * NOTE: non-iterable objects gets passed through\n     * @param object object|array - the array or object to iterate\n     * @param callback function - a function to be executed once for each item in the array.\n     * @param thisArg object - the context for the callback function\n     */\n    function forEach( object, callback, thisArg ) {\n      var obj    = Object( object ); // the target object\n      var values = isArraylike( obj ) ? obj : ( isPlainObject( obj ) ? keys( obj ) : [ obj ] ); // the values to\n                                                                                                // traverse (see doc\n                                                                                                // comment)\n      var length = parseInt( values.length ) || 0; // the length of values\n      var index  = 0; // index\n      // Iterate through the values, execute the callback with three arguments:\n      // 1) the current item 2) the current index 3) the object being traversed.\n      for ( ; index < length; index ++ ) {\n        callback.call( thisArg, values[ index ], index, obj );\n      }\n    }\n\n    /**\n     * Merges user options with default settings (shallow).\n     * Returns a new object without modifying source objects.\n     * Only keys that exist on target obj will be copied to the new object.\n     * @note: non-writable properties on the target object will not be over-ridden\n     * @returns object\n     */\n    function extend( target, object ) {\n      target = Object( target );\n      object = Object( object );\n      return Object.getOwnPropertyNames( target ).reduce( function ( extended, key ) {\n        return defineProperty( extended, key, getPropertyDescriptor( object, key ) || getPropertyDescriptor( target, key ) );\n      }, {} )\n    }\n\n    /**\n     * Associates arbitrary data with DOM nodes or other objects.\n     * (shortened version of jquery's data method)\n     * @param element object - the element for which data is being set or retrieved.\n     * @param key string (optional) - the name of the data property to set or retrieve.\n     * @param value mixed (optional) - Sets the value of the specified key. any type of data.\n     */\n    function Data( element, key, value ) {\n      var data = {}, id;\n\n      if ( isObject( element ) ) {\n        id   = element[ expando ] || ( element[ expando ] = ++ uid );\n        data = cache[ id ] || ( cache[ id ] = {} );\n      }\n      // Get data\n      if ( value === undefined ) {\n        if ( key === undefined ) {\n          return data; // if no key or value is given, return the data store object\n        }\n        return data[ key ];\n      }\n      // Set data\n      else if ( key !== undefined ) {\n        data[ key ] = value;\n        return value;\n      }\n    }\n\n    // Remove all associated with the given element\n    function RemoveData( element ) {\n      var id = element && element[ expando ];\n      if ( id ) {\n        delete element[ id ]; // remove the id property from the element\n        delete cache[ id ]; // delete the data store for the element from the cache\n      }\n    }\n\n    /**\n     * Create element with attributes\n     * @param name {string} The name of the element to create\n     * @param attributes {object} (optional) any html attribute, plus several DOM properties:\n     * innerHTML, textContent, children (chilren takes an array and child nodes)\n     * @returns elem\n     */\n    function createElement( name, attributes ) {\n      var elem = document.createElement( name );\n\n      if ( attributes === undefined ) {\n        return elem;\n      }\n      // Handle attributes\n      forEach( attributes, function ( name ) {\n        var value = attributes[ name ];\n        if ( value === null ) return;\n        switch ( name ) {\n          // 'text' sets the text content\n          case 'textContent':\n            elem.textContent = value;\n            break;\n          // 'html' sets the innerHTML\n          case 'innerHTML':\n            elem.innerHTML = value;\n            break;\n          // 'children' one or more child nodes to insert into the element - can be single node, nodelist, array\n          case 'children':\n            forEach( value, function ( child ) {\n              isNode( child ) && elem.appendChild( child )\n            } );\n            break;\n          // handle standard attributes\n          default:\n            elem.setAttribute( name, value );\n        }\n      } )\n      return elem;\n    }\n\n    /**\n     * Handles the target elements parameter.\n     * Target elements can be passed into splitType in several different forms:\n     * Selector string, element, array/nodelist/jquery object, deep array\n     * This method converts those different formats into a plain array of elements.\n     * @returns:  {array}  the target elements\n     */\n    function _processElements( elements ) {\n      var elementsArray = [],\n          selector, isId, ID, len, len2, i, k;\n      // A. If elements is a selector string...\n      // ==> If its a single ID selector, use getElementById (super fast)\n      // ==> otherwise use querySelectorAll to find the set of matched elements.\n      if ( isString( elements ) ) {\n        selector = elements.trim();\n        isId     = selector[ 0 ] === '#' && ! /[^\\w]/.test( ID = selector.slice( 1 ) );\n        elements = isId ? document.getElementById( ID ) : document.querySelectorAll( selector );\n      }\n      // B. if we're certain that elements is a single node or nodelist,\n      // convert it to an array and return here.\n      if ( selector || isNode( elements ) ) {\n        return isNode( elements ) ? [ elements ] : slice.call( elements );\n      }\n\n      // if elements is an array or jquery/object...\n      // flatten it if necessary, remove any non-element values, and return the result.\n      if ( isArraylike( elements ) ) {\n        for ( i = 0, len = elements.length; i < len; i ++ ) {\n          if ( isArraylike( elements[ i ] ) ) {\n            for ( k = 0, len2 = elements[ i ].length; k < len2; k ++ ) {\n              if ( isNode( elements[ i ][ k ] ) ) {\n                elementsArray.push( elements[ i ][ k ] );\n              }\n            }\n          } else if ( isNode( elements[ i ] ) ) {\n            elementsArray.push( elements[ i ] );\n          }\n        }\n      }\n      return elementsArray;\n    }\n\n    /**\n     * Splits the text content of a single element using to the settings for the SplitType instance.\n     * By \"split\", we mean the process of breaking down plain text into separate components\n     * (lines, words, and characters) and wrapping each one in its own element.\n     * There are three possible split types: lines, words, and characters. Each one is optional,\n     * so text can be split into any combination of the three types.\n     *\n     * 'this' refers to the splitType instance from which this function was called.\n     * @param element node - the target element for the split operation.\n     */\n    function _split( element ) {\n      // Let o equal the settings for this SplitTypes instance.\n      var settings   = this.settings,\n          // the tag name for split text nodes\n          TAG_NAME   = settings.tagName,\n          // A unique string to tempNodeorarily replace <br> tags\n          BR_SYMBOL  = 'B' + (new Date() * 1) + 'R',\n          // The plain text content of the target element\n          TEXT_CONTENT,\n          // the split types to use (ie lines, words, characters)\n          types      = settings.split,\n          // (boolean) true if text is being split into lines\n          splitLines = types.indexOf( 'lines' ) !== - 1,\n          // (boolean) true if text is being split into words\n          splitWords = types.indexOf( 'words' ) !== - 1,\n          // (boolean) true if text is being split into characters\n          splitChars = types.indexOf( 'chars' ) !== - 1,\n          // (boolean) true if position is set to absolute\n          isAbsolute = settings.position === 'absolute' || settings.absolute === true,\n          // An empty element node\n          tempNode   = createElement( 'div' ),\n          // An array of the split lines in the current element\n          lineNodes  = [],\n          // An array of the split words in the current element\n          wordNodes  = [],\n          // An array of the split characters in the current element\n          charNodes  = [],\n          lineNode,\n          wordNode,\n          charNode,\n          splitText;\n\n\n      /*---------------------------------------\n       SPLIT TEXT INTO WORDS AND CHARACTERS\n       -----------------------------------------*/\n\n      // 1. splitText is a wrapper to hold the HTML structure while its being built.\n      splitText = splitLines ? createElement( 'div' ) : createFragment();\n\n      // 2. Get the element's text content.\n      //    temporarily replace <br> tags with a unique string before extracting text.\n      tempNode.innerHTML = element.innerHTML.replace( /<br\\s*\\/?>/g, (' ' + BR_SYMBOL + ' ') );\n      TEXT_CONTENT       = tempNode.textContent.replace( /\\s+/g, ' ' ).trim(); // remove extra white space\n\n      // 3. Iterate over each word in the text.\n      //    Create an array of wrapped the word elements (wordNodes).\n      //    WORD (string) refers to the current word in the loop.\n      wordNodes = TEXT_CONTENT.split( ' ' ).map( function ( WORD ) {\n\n        // a. If the current word is a symbol representing a br tag,\n        //    append a <br> tag to splitText and continue to the next word\n        if ( WORD === BR_SYMBOL ) {\n          splitText.appendChild( createElement( 'br' ) );\n          return null; // br tag is not added to the array of wordNodes\n        }\n\n        // b. If Splitting Text Into Characters...\n        if ( splitChars ) {\n\n          // i. Iterate through the characters in the current word\n          //    CHAR (string) refers to the current character in the loop\n          //    currentWordCharNodes is array of the wrapped character elements in this word\n          var currentWordCharNodes = WORD.split( '' ).map( function ( CHAR ) {\n            // Create an element to wrap the current character.\n            charNode = createElement( TAG_NAME, {\n              class       : settings.charClass + ' ' + settings.splitClass,\n              style       : \"display: inline-block;\",\n              textContent : CHAR\n            } );\n            return charNode;\n          } );\n\n          // ii. push the character nodes for this word to charNodes\n          push.apply( charNodes, currentWordCharNodes );\n\n        } // END IF;\n\n        // c. If Splitting Text Into Words...\n        if ( splitWords || splitLines ) {\n\n          // i. Let wordNode be an element to wrap the current word.\n          wordNode = createElement( TAG_NAME, {\n            class       : ( settings.wordClass + ' ' + settings.splitClass ),\n            style       : 'display: inline-block; position:' + ( splitWords ? 'relative' : 'static;' ),\n            // It contains the character nodes, or the word (plain text).\n            children    : splitChars ? currentWordCharNodes : null,\n            textContent : ! splitChars ? WORD : null\n          } );\n\n          // ii. Append wordNode to splitText.\n          splitText.appendChild( wordNode );\n\n        } // END IF;\n\n        // d. If NOT Splitting Words...\n        else {\n          // i. Append the character nodes directly to splitText.\n          forEach( currentWordCharNodes, function ( charNode ) {\n            splitText.appendChild( charNode );\n          } )\n        }\n\n        // e. Add a space after the word.\n        splitText.appendChild( createTextNode( ' ' ) );\n\n        return wordNode;\n\n      }, this ).filter( function ( el ) {\n        return el\n      } ); // remove any undefined/null entries from the array\n      // end forEach\n\n      // 4. Now remove the original contents of the target element and insert the split text.\n      element.innerHTML = '';\n      element.appendChild( splitText );\n\n      // 5. Add the split words/chars in this element to the array of all split words/chars.\n      push.apply( this.words, wordNodes );\n      push.apply( this.chars, charNodes );\n\n      // STOP HERE If not splitting text into lines or using absolute positioning\n      if ( ! isAbsolute && ! splitLines ) {\n        return;\n      }\n\n      /*---------------------------------\n       GET STYLES AND POSITIONS\n       ----------------------------------*/\n\n      // There is no built-in way to detect natural line breaks in text (when a block of text\n      // wraps to fit its container). So in order to split text into lines, we have to detect\n      // line breaks by checking the top offset of words. This is why text was split into words\n      // first. To apply absolute positioning, its also necessary to record the size and position\n      // of every split node (lines, words, characters).\n\n      // To consolidate DOM getting/settings, this is all done at the same time, before actually\n      // splitting text into lines, which involves restructuring the DOM again.\n\n      var lines = [],\n          currentLine,\n          lineOffsetY,\n          lineHeight,\n          contentBox,\n          elementHeight,\n          elementWidth,\n          nodes,\n          parent,\n          nextsib,\n          cs,\n          align;\n\n      // nodes is a live HTML collection of the nodes in this element\n      nodes = Data( element ).nodes = element.getElementsByTagName( TAG_NAME );\n\n      // Cache the element's parent and next sibling (for DOM removal).\n      parent  = element.parentElement;\n      nextsib = element.nextElementSibling;\n\n      // get the computed style object for the element\n      cs    = window.getComputedStyle( element );\n      align = cs.textAlign;\n\n      // If using absolute position...\n      if ( isAbsolute ) {\n\n        // Let contentBox be an object containing the width and offset position of the element's\n        // content box (the area inside padding box). This is needed (for absolute positioning)\n        // to set the width and position of line elements, which have not been created yet.\n        contentBox = {\n          left  : splitText.offsetLeft,\n          top   : splitText.offsetTop,\n          width : splitText.offsetWidth\n        };\n\n        // Let elementWidth and elementHeight equal the actual width/height of the element.\n        // Also check if the element has inline height or width styles already set.\n        // If it does, cache those values for later.\n        elementWidth  = element.offsetWidth;\n        elementHeight = element.offsetHeight;\n\n        Data( element ).cssWidth  = element.style.width;\n        Data( element ).cssHeight = element.style.height;\n      }\n\n      // 6. Iterate over every split text node\n      forEach( nodes, function ( node ) {\n        if ( node === splitText ) return;\n\n        var isWord = node.parentElement === splitText;\n        var wordOffsetY;\n        // a. Detect line breaks by checking the top offset of word nodes.\n        //    For each line, create an array (line) containing the words in that line.\n        if ( splitLines && isWord ) {\n          // wordOffsetY is the top offset of the current word.\n          wordOffsetY = Data( node ).top = node.offsetTop;\n\n          // If wordOffsetY is different than the value of lineOffsetY...\n          // Then this word is the beginning of a new line.\n          // Set lineOffsetY to value of wordOffsetY.\n          // Create a new array (line) to hold the words in this line.\n          if ( wordOffsetY !== lineOffsetY ) {\n            lineOffsetY = wordOffsetY;\n            lines.push( currentLine = [] );\n          }\n\n          // Add the current word node to the line array\n          currentLine.push( node );\n        }\n\n        // b. Get the size and position of all split text nodes.\n        if ( isAbsolute ) {\n          // The values are stored using the data method\n          // All split nodes have the same height (lineHeight). So its only retrieved once.\n          // If offset top has already been cached (step 11 a) use the stored value.\n          Data( node ).top    = wordOffsetY || node.offsetTop;\n          Data( node ).left   = node.offsetLeft;\n          Data( node ).width  = node.offsetWidth;\n          Data( node ).height = lineHeight || ( lineHeight = node.offsetHeight );\n        }\n\n      } ) // END LOOP\n\n      // 7. Remove the element from the DOM\n      parent.removeChild( element );\n\n\n      /*--------------------------------\n       SPLIT LINES\n       ----------------------------------*/\n\n      if ( splitLines ) {\n\n        // 8. Let splitText be a new document createFragment to hold the HTML structure.\n        splitText = createFragment();\n\n        // 9. Iterate over the arrays in lines (see 11 b)\n        //     Let line be the array of words in the current line.\n        //     Return an array of the wrapped line elements (lineNodes)\n        lineNodes = lines.map( function ( line ) {\n\n          // a. Create a new element (lineNode) to wrap the current line.\n          //    Append lineNode to splitText.\n          splitText.appendChild(\n            lineNode = createElement( TAG_NAME, {\n              class : settings.lineClass + ' ' + settings.splitClass,\n              style : 'display: block; text-align:' + align + '; width: 100%;'\n            } )\n          );\n\n          // b. store size/position values for the line element.\n          if ( isAbsolute ) {\n            Data( lineNode ).type   = 'line';\n            Data( lineNode ).top    = Data( line[ 0 ] ).top; // the offset top of the first word in the line\n            Data( lineNode ).height = lineHeight;\n          }\n\n          // c. Iterate over the word elements in the current line.\n          //    wordNode refers to the current word in the loop.\n          forEach( line, function ( wordNode ) {\n\n            // i. If splitting text into words,\n            // just append wordNode to the line element.\n            if ( splitWords ) {\n              lineNode.appendChild( wordNode );\n\n              // ii. If NOT splitting into words...\n              //     if splitting characters append the char nodes to the line element\n            } else if ( splitChars ) {\n              slice.call( wordNode.children ).forEach( function ( charNode ) {\n                lineNode.appendChild( charNode );\n              } )\n            }\n            // iii. If NOT splitting into words OR characters...\n            //      append the plain text content of the word to the line element\n            else {\n              lineNode.appendChild( createTextNode( wordNode.textContent ) )\n            }\n            // iV. add a space after the word\n            lineNode.appendChild( createTextNode( ' ' ) );\n          } ) // END LOOP\n\n          return lineNode;\n        } ) // END LOOP\n\n        // 10. Insert the new splitText\n        element.replaceChild( splitText, element.firstChild );\n\n        // 11. Add the split line elements to the array of all split lines\n        push.apply( this.lines, lineNodes );\n      }\n\n      /*---------------------------------\n       SET ABSOLUTE POSITION\n       ----------------------------------*/\n\n      // Apply absolute positioning to all split text elements (lines, words, and characters).\n      // The size and relative position of split nodes has already been recorded. Now we use those\n      // values to set each element to absolute position. However, positions were logged before\n      // text was split into lines (step 13 - 15). So some values need to be recalcated to account\n      // for the modified DOM structure.\n\n      if ( isAbsolute ) {\n\n        // 12. Set the width/height of the parent element, so it does not collapse when its\n        //     child nodes are set to absolute position.\n        element.style.width  = element.style.width || elementWidth + 'px';\n        element.style.height = elementHeight + 'px';\n\n        // 13. Iterate over all split nodes.\n        //     Let node be current node in the loop\n        forEach( nodes, function ( node ) {\n\n          // a. Let isLine be true if the current node is a line element\n          //    Let isLineChild be true if the current node is a direct child of a line element.\n          var isLine      = Data( node ).type === 'line';\n          var isLineChild = ! isLine && Data( node.parentElement ).type === 'line';\n\n          // b. Set the top position of the current node.\n          //    If its a line node, we use the top offset of its first child (see step 14 b)\n          //    If its the child of line node, then its top offset is zero\n          node.style.top = isLineChild ? 0 : Data( node ).top + 'px';\n\n          // c. Set the left position of the current node.\n          //    If its a line node, this this is equal to the left offset of contentBox (step 9).\n          //    If its the child of a line node, the cached valued must be recalculated so its\n          //    relative to the line node (which didn't exist when value was initially checked).\n          // NOTE: the value is recalculated without querying the DOM again\n          node.style.left = isLine ? (contentBox.left + 'px') :\n          ( isLineChild ? ( Data( node ).left - contentBox.left ) :\n            Data( node ).left ) + 'px';\n\n          // d. Set the height of the current node to the cached value.\n          node.style.height = Data( node ).height + 'px';\n\n          // e. Set the width of the current node.\n          //    If its a line element, width is equal to the width of the contentBox (see step 9).\n          node.style.width = isLine ? (contentBox.width + 'px') : Data( node ).width + 'px';\n\n          // f. Finally, set the node's position to absolute.\n          node.style.position = 'absolute';\n        } )\n      } // end if;\n\n      // 14. Re-attach the element to the DOM\n      if ( nextsib ) parent.insertBefore( element, nextsib );\n      else parent.appendChild( element );\n\n    } // End Function\n\n    /***************************\n     SplitType Constructor\n     ***************************/\n\n    function SplitType( elements, options ) {\n      // Allow the SplitType constructor to be called without 'new'\n      if ( ! ( this instanceof SplitType ) ) {\n        return new SplitType( elements, options );\n      }\n      this.isSplit  = false;\n      // Merge options with defaults\n      this.settings = extend( _defaults, options );\n      // Prepare target elements\n      this.elements = _processElements( elements );\n\n      if ( this.elements.length ) {\n        // Store the original HTML content of each target element\n        this.originals = this.elements.map( function ( element ) {\n          return ( Data( element ).html = Data( element ).html || element.innerHTML );\n        } );\n\n        // Initiate the split operation.\n        this.split();\n      }\n    }\n\n\n    /*********************************\n     PUBLIC PROPERTIES AND METHODS\n     *********************************/\n\n    /**\n     * SplitType.defaults\n     * A public property on the global SplitType object that allows users to access or modify the\n     * default settings. Multiple settings can be changed at once by assigning an object to\n     * SplitType.defaults containing the settings you wish to change. This will merge the new settings\n     * with the internal _defaults object, not overwrite it.\n     * To access the current settings: SplitType.defaults\n     * To modify settings: SplitType.defaults = {setting1: 'new value', setting2: 'new value'}\n     * @public\n     * @static\n     */\n    defineProperty( SplitType, 'defaults', {\n      get : function () {\n        return _defaults;\n      },\n      set : function ( object ) {\n        _defaults = extend( _defaults, object );\n      }\n    } );\n\n    /**\n     * instance.split()\n     * Splits text in the target elements. This method gets called automatically when a new SplitType\n     * instance is created. The method can also be called manually to re-split text with new options.\n     * @param newOptions: (object) modifies the settings for the splitType instance.\n     * @public\n     */\n    SplitType.prototype.split = function split( newOptions ) {\n      // If any of the target elements have already been split,\n      // revert them back to their original content before splitting them.\n      this.revert();\n\n      // Create arrays to hold the split lines, words, and characters for this instance.\n      // These are public properties which can be accessed on the SplitType instance.\n      this.lines = [];\n      this.words = [];\n      this.chars = [];\n\n      // cache vertical scroll position before splitting\n      var scrollPos = [ window.pageXoffset, window.pageYoffset ];\n\n      // If new options were passed into the split() method, update settings for the instance.\n      if ( newOptions !== undefined ) {\n        this.settings = extend( this.settings, newOptions );\n      }\n\n      // Call the _split function to split the text in each target element\n      forEach( this.elements, function ( element ) {\n        _split.call( this, element );\n        Data( element ).isSplit = true; // Set isSplit to true for this element.\n      }, this );\n\n      // Set isSplit to true for the SplitType instance\n      this.isSplit = true;\n\n      // Set scroll position to cached value.\n      window.scrollTo.apply( window, scrollPos );\n\n      // Clear data Cache\n      forEach( this.elements, function ( element ) {\n        var nodes = Data( element ).nodes || [];\n        for ( var i = 0, len = nodes.length; i < len; i ++ ) {\n          RemoveData( nodes[ i ] );\n        }\n      } )\n    }\n\n    /**\n     * revert\n     * Reverts the target elements back to their original html content.\n     * @public\n     */\n    SplitType.prototype.revert = function revert() {\n      // Delete the arrays of split text elements from the SplitType instance.\n      // @NOTE: these properties are non-writable, that is why they have to be\n      // deleted instead of just setting their value to null.\n      if ( this.isSplit ) {\n        this.lines = this.words = this.chars = null;\n      }\n\n      // Remove split text from target elements and restore original content\n      forEach( this.elements, function ( elem ) {\n        if ( Data( elem ).isSplit && Data( elem ).html ) {\n          elem.innerHTML    = Data( elem ).html;\n          elem.style.height = Data( elem ).cssHeight || '';\n          elem.style.width  = Data( elem ).cssWidth || '';\n          this.isSplit      = false;\n        }\n      }, this );\n    }\n    return SplitType;\n  })( window, document )\n} )\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/johnpuddephatt/Sites/transition/web/app/themes/transition/node_modules/typesplit/splittype.js\n// module id = 7\n// module chunks = 0","export default {\n  init() {\n    // JavaScript to be fired on the about us page\n  },\n};\n\n\n\n// WEBPACK FOOTER //\n// ./scripts/routes/about.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./styles/main.scss\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}